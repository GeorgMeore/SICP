(load "syntax.scm")
(load "internals.scm")

(define (evaluate exp env)
  ((analyze exp) env))

(define (analyze exp)
  (cond ((self-evaluating? exp)
          (analyze-self-evaluating exp))
        ((variable? exp)
          (analyze-variable exp))
        ((quoted? exp)
          (analyze-quoted exp))
        ((assignment? exp)
          (analyze-assignment exp))
        ((definition? exp)
          (analyze-definition exp))
        ((if? exp)
          (analyze-if exp))
        ((lambda? exp)
          (analyze-lambda exp))
        ((begin? exp)
          (analyze-sequence (begin-actions exp)))
        ((let? exp)
          (analyze (let-expression exp)))
        ((application? exp)
          (analyze-application exp))
        (else
          (error "unknown expression type" exp))))

(define (analyze-self-evaluating exp)
  (lambda (env) exp))

(define (analyze-variable exp)
  (lambda (env) (lookup-variable-value exp env)))

(define (analyze-quoted exp)
  (let ((text (text-of-quotation exp)))
    (lambda (env) text)))

(define (analyze-assignment exp)
  (let ((name (assignment-variable exp))
        (executor (analyze (assignment-value exp))))
    (lambda (env)
      (let ((value (executor env)))
        (set-variable-value! name value env)
        value))))

(define (analyze-definition exp)
  (let ((name (definition-variable exp))
        (executor (analyze (definition-value exp))))
    (lambda (env)
      (let ((value (executor env)))
        (define-variable! name value env)
        value))))

(define (analyze-if exp)
  (let ((predicate-executor (analyze (if-predicate exp)))
        (consequent-executor (analyze (if-consequent exp)))
        (alternative-executor (analyze (if-alternative exp))))
    (lambda (env)
      (if (true? (predicate-executor env))
          (consequent-executor env)
          (alternative-executor env)))))

(define (analyze-lambda exp)
  (let ((params (lambda-parameters exp))
        (body-executor (analyze-sequence (lambda-body exp))))
    (lambda (env)
      (make-procedure params body-executor env))))

(define (analyze-sequence exps)
  (define (combine-executors executors)
    (if (null? (cdr executors))
        (car executors)
        (let ((rest (combine-executors (cdr executors))))
          (lambda (env) ((car executors) env) (rest env)))))
  (let ((executors (map analyze exps)))
    (if (null? executors)
        (error "empty sequence")
        (combine-executors executors))))

(define (analyze-application exp)
  (let ((function-executor (analyze (operator exp)))
        (argument-executors (map analyze (operands exp))))
    (lambda (env)
      (execute-application
        (function-executor env)
        (map (lambda (exec) (exec env))
             argument-executors)))))

(define (execute-application proc args)
  (cond ((primitive-procedure? proc)
          (apply-primitive-procedure proc args))
        ((compound-procedure? proc)
          ((procedure-body proc)
            (extend-environment
              (procedure-parameters proc)
              args
              (procedure-environment proc))))
        (else
          (error "unknown procedure type" proc))))
