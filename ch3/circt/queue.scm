(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (insert! v)
      (let ((new-pair (list v)))
        (cond ((empty?)
                (set! front-ptr new-pair)
                (set! rear-ptr new-pair))
              (else
                (set-cdr! rear-ptr new-pair)
                (set! rear-ptr new-pair)))))
    (define (delete!)
      (cond ((empty?)
              (error "delete-queue! called with empty queue"))
            (else
              (set! front-ptr (cdr front-ptr)))))
    (define (front)
      (if (empty?)
          (error "front-queue called with empty queue")
          (car front-ptr)))
    (define (display-front)
      (display front-ptr))
    (define (self m)
      (cond ((eq? m 'empty?) (empty?))
            ((eq? m 'insert!) insert!)
            ((eq? m 'delete!) (delete!))
            ((eq? m 'front) (front))
            ((eq? m 'display) (display-front))
            (else (error "bad action"))))
    self))

(define (empty-queue? queue)
  (queue 'empty?))
(define (insert-queue! queue v)
  ((queue 'insert!) v))
(define (delete-queue! queue)
  (queue 'delete!))
(define (front-queue queue)
  (queue 'front))
(define (display-queue queue)
  (queue 'display))
