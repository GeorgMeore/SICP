(load "connector")

(define (inform-about-value constraint)
  (constraint 'new-value))
(define (inform-about-no-value constraint)
  (constraint 'lost-value))

(define (adder a b sum)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
            (let ((new-value (+ (get-value a) (get-value b))))
              (set-value! sum new-value self)))
          ((and (has-value? a) (has-value? sum))
            (let ((new-value (- (get-value sum) (get-value a))))
              (set-value! b new-value self)))
          ((and (has-value? b) (has-value? sum))
            (let ((new-value (- (get-value sum) (get-value b))))
              (set-value! a new-value self)))))
  (define (process-lost-value)
    (forget-value! sum self)
    (forget-value! a self)
    (forget-value! b self)
    (process-new-value))
  (define (self m)
    (cond ((eq? m 'new-value) (process-new-value))
          ((eq? m 'lost-value) (process-lost-value))
          (else (error "adder: bad message" m))))
  (connect a self)
  (connect b self)
  (connect sum self)
  self)

(define (multiplier a b product)
  (define (process-new-value)
    (cond ((or (and (has-value? a) (= (get-value a) 0))
               (and (has-value? b) (= (get-value b) 0)))
            (set-value! product 0 self))
          ((and (has-value? a) (has-value? b))
            (let ((new-value (* (get-value a) (get-value b))))
              (set-value! product new-value self)))
          ((and (has-value? a) (has-value? product))
            (let ((new-value (/ (get-value product) (get-value a))))
              (set-value! b new-value self)))
          ((and (has-value? b) (has-value? product))
            (let ((new-value (/ (get-value product) (get-value b))))
              (set-value! a new-value self)))))
  (define (process-lost-value)
    (forget-value! a self)
    (forget-value! b self)
    (forget-value! product self)
    (process-new-value))
  (define (self m)
    (cond ((eq? m 'new-value) (process-new-value))
          ((eq? m 'lost-value) (process-lost-value))
          (else (error "multiplier: bad message" m))))
  (connect a self)
  (connect b self)
  (connect product self)
  self)

(define (equality a b)
  (define (process-new-value)
    (cond ((has-value? a)
            (set-value! b (get-value a) self))
          ((has-value? b)
            (set-value! a (get-value b) self))))
  (define (process-lost-value)
    (forget-value! a self)
    (forget-value! b self)
    (process-new-value))
  (define (self m)
    (cond ((eq? m 'new-value) (process-new-value))
          ((eq? m 'lost-value) (process-lost-value))
          (else (error "equality: bad message" m))))
  (connect a self)
  (connect b self)
  self)

(define (constant value conn)
  (define (self m)
    (error "constraint: bad message" m))
  (connect conn self)
  (set-value! conn value self)
  self)

(define (probe name conn)
  (define (display-probe value)
    (print name " = " value))
  (define (process-new-value)
    (display-probe (get-value conn)))
  (define (process-lost-value)
    (display-probe "?"))
  (define (self m)
    (cond ((eq? m 'new-value) (process-new-value))
          ((eq? m 'lost-value) (process-lost-value))
          (else (error "bad message" m))))
  (connect conn self)
  self)
