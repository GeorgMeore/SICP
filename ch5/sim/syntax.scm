(define (tagged-list? lst tag)
  (and (pair? lst) (eq? (car lst) tag)))

; (assign <name> . <exp>)
(define (assign? inst)
  (tagged-list? inst 'assign))
(define (assign-name inst)
  (cadr inst))
(define (assign-value inst)
  (cddr inst))

; (test . <condition>)
(define (test? inst)
  (tagged-list? inst 'test))
(define (test-condition inst)
  (cdr inst))

; (branch <dest>)
(define (branch? inst)
  (tagged-list? inst 'branch))
(define (branch-dest inst)
  (cadr inst))

; (goto <dest>)
(define (goto? inst)
  (tagged-list? inst 'goto))
(define (goto-dest inst)
  (cadr inst))

; (save <name>)
(define (save? inst)
  (tagged-list? inst 'save))
(define (save-name inst)
  (cadr inst))

; (restore <name>)
(define (restore? inst)
  (tagged-list? inst 'restore))
(define (restore-name inst)
  (cadr inst))

; (perform . <action>)
(define (perform? inst)
  (tagged-list? inst 'perform))
(define (perform-action inst)
  (cdr inst))

; ((op <name>) <arg1> ... <argn>)
(define (operation? exp)
  (and (pair? exp) (tagged-list? (car exp) 'op)))
(define (operation-name exp)
  (cadr (car exp)))
(define (operation-operands exp)
  (cdr exp))

; (const <value>)
(define (constant? exp)
  (eq? (car exp) 'const))
(define (constant-value exp)
  (cadr exp))

; (label <name>)
(define (label? exp)
  (eq? (car exp) 'label))
(define (label-name exp)
  (cadr exp))

; (reg <name>)
(define (register? exp)
  (eq? (car exp) 'reg))
(define (register-name exp)
  (cadr exp))
