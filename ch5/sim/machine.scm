(define (println . values)
  (for-each display values)
  (newline))

(define (make-register name)
  (let ((contents '*unassigned*)
        (trace #f))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set-trace)
              (lambda (value) (set! trace value)))
            ((eq? message 'set)
              (lambda (value)
                (when trace
                  (println "register: " name " " contents " " value))
                (set! contents value)))
            (else
              (error "Invalid register operation" message))))
    dispatch))

(define (get-contents register)
  (register 'get))

(define (set-contents! register value)
  ((register 'set) value))

(define (set-trace! register value)
  ((register 'set-trace) value))


(define (make-stack)
  (let ((stack '())
        (pushes 0)
        (depth 0)
        (max-depth 0))
    (define (push x)
      (set! depth (+ depth 1))
      (set! pushes (+ pushes 1))
      (set! max-depth (max depth max-depth))
      (set! stack (cons x stack)))
    (define (pop)
      (if (null? stack)
          (error "Pop from empty stack")
          (let ((top (car stack)))
            (set! stack (cdr stack))
            (set! depth (- depth 1))
            top)))
    (define (reset) (set! stack '()))
    (define (stat)
      (println "stack: " pushes " " depth " " max-depth))
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'reset) (reset))
            ((eq? message 'stat) (stat))
            (else
              (error "Invalid stack operation" message))))
    dispatch))

(define (pop stack)
  (stack 'pop))

(define (push stack value)
  ((stack 'push) value))


(define (make-empty-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (text '*notext*)
        (trace #f))
    (let ((ops-table (list (cons 'stack-reset (lambda () (stack 'reset)))
                           (cons 'stack-stat (lambda () (stack 'stat)))))
          (reg-table (list (cons 'pc pc)
                           (cons 'flag flag))))
      (define (get-register name)
        (let ((val (assoc name reg-table)))
          (cond (val (cdr val))
                ((eq? text '*notext*) ; assembling is in process
                  (let ((reg (make-register name)))
                    (set! reg-table (cons (cons name reg) reg-table))
                    reg))
                (else (error "Unknown register" name)))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (cond ((null? insts)
                  'done)
                (else
                  (when trace
                    (println (instruction-text (car insts))))
                  ((instruction-executor (car insts)))
                  (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
                (set-contents! pc text)
                (execute))
              ((eq? message 'install-instructions)
                (lambda (insts) (set! text insts)))
              ((eq? message 'get-register)
                get-register)
              ((eq? message 'install-operations)
                (lambda (ops) (set! ops-table (append ops-table ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) ops-table)
              ((eq? message 'set-trace)
                (lambda (value) (set! trace value)))
              (else
                (error "Invalid machine operation" message))))
      dispatch)))

(define (make-machine ops text)
  (let ((machine (make-empty-machine)))
    ((machine 'install-operations) ops)
    ((machine 'install-instructions)
      (assemble text machine))
    machine))

(define (start machine)
  (machine 'start))

(define (get-register machine name)
  ((machine 'get-register) name))

(define (get-register-contents machine name)
  (get-contents (get-register machine name)))

(define (set-register-contents! machine name value)
  (set-contents! (get-register machine name) value))

(define (enable-instruction-tracing machine)
  ((machine 'set-trace) #t))

(define (disable-instruction-tracing machine)
  ((machine 'set-trace) #f))

(define (enable-register-tracing machine name)
  (set-trace! (get-register machine name) #t))

(define (disable-register-tracing machine name)
  (set-trace! (get-register machine name) #f))
