(define (tagged-list? exp tag)
  (and (pair? exp) (eq? (car exp) tag)))

; <number>
(define (self-evaluating? exp)
  (or (number? exp) (string? exp)))

; <symbol>
(define (variable? exp)
  (symbol? exp))

; (quote <text>)
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp)
  (cadr exp))

; (lambda (<params>...) <body>)
(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (lambda-parameters exp)
  (cadr exp))
(define (lambda-body exp)
  (scan-out-defines (cddr exp)))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (scan-out-defines seq)
  (define (iter exps vars args body)
    (if (null? exps)
        (if (null? vars)
            seq
            (list (cons (make-lambda (reverse vars) (reverse body)) args)))
        (let ((first (first-exp exps))
              (rest (rest-exps exps)))
          (if (definition? first)
              (let ((var (definition-variable first))
                    (val (definition-value first)))
                (iter rest
                      (cons var vars)
                      (cons ''*unassigned* args)
                      (cons (make-assignment var val) body)))
              (iter rest vars args (cons first body))))))
  (iter seq '() '() '()))

; (set! <var> <value>)
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp)
  (cadr exp))
(define (assignment-value exp)
  (caddr exp))
(define (make-assignment var val)
  (list 'set! var val))

; (def <var> <value>)
; (def (<var> <params>...) <body>)
(define (definition? exp)
  (tagged-list? exp 'def))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp) (cddr exp))))

; (if <pred> <cons>)
; (if <pred> <cons> <alt>)
(define (if? exp)
  (tagged-list? exp 'if))
(define (if-predicate exp)
  (cadr exp))
(define (if-consequent exp)
  (caddr exp))
(define (if-alternative exp)
  (if (null? (cdddr exp))
      'false
      (cadddr exp)))

; (begin <actions>...)
(define (begin? exp)
  (tagged-list? exp 'begin))
(define (begin-actions exp)
  (cdr exp))
(define (last-exp? seq)
  (null? (cdr seq)))
(define (first-exp seq)
  (car seq))
(define (rest-exps seq)
  (cdr seq))

; (<operator> <operands>...)
(define (application? exp)
  (pair? exp))
(define (operator exp)
  (car exp))
(define (operands exp)
  (cdr exp))
(define (no-operands? ops)
  (null? ops))
(define (first-operand ops)
  (car ops))
(define (rest-operands ops)
  (cdr ops))
(define (last-operand? ops)
  (null? (cdr ops)))
