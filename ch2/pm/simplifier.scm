(define (match pat exp dict)
  (define (extend-dict pat exp dict)
    (if (dict-has? pat dict)
        (if (equal? (dict-lookup pat dict))
          dict
          'failed)
        (dict-add (pattern-variable pat) exp dict)))
  (cond ((eq? dict 'failed) 'failed)
        ((atom? pat)
          (if (and (atom? exp) (eq? exp pat))
              dict
              'failed))
        ((constant-pattern? pat)
          (if (constant? exp)
              (extend-dict pat exp dict)
              'failed))
        ((variable-pattern? pat)
          (if (variable? exp)
              (extend-dict pat exp dict)
              'failed))
        ((arbitrary-pattern? pat)
          (extend-dict pat exp dict))
        ((atom? exp) 'failed)
        (else
          (match (cdr pat)
                 (cdr exp)
                 (match (car pat) (car exp) dict)))))

(define (instantiate skel dict)
  (cond ((atom? skel) skel)
        ((skeleton-evaluation? skel)
          (dict-lookup (skeleton-expression skel) dict))
        (else
          (cons (instantiate (car skel) dict)
                (instantiate (cdr skel) dict)))))

(define (make-simplifier rules)
  (define (simplify exp)
    (try-rules
      (if (pair? exp)
          (map simplify exp)
          exp)
      rules))
  (define (try-rules exp rules)
    (if (null? rules)
        exp
        (let ((dict (match (rule-pattern (car rules)) exp (make-dict))))
          (if (eq? dict 'failed)
              (try-rules exp (cdr rules))
              (simplify (instantiate (rule-skeleton (car rules)) dict))))))
  simplify)
